import regexpPlugin from 'eslint-plugin-regexp';

export default {
  plugins: { regexp: regexpPlugin },
  rules: {
    'regexp/no-contradiction-with-assertion': 'error',
    'regexp/no-control-character': 'error',
    'regexp/no-dupe-disjunctions': 'error',
    'regexp/no-empty-alternative': 'error',
    'regexp/no-empty-capturing-group': 'error',
    'regexp/no-empty-character-class': 'error',
    'regexp/no-empty-group': 'error',
    'regexp/no-empty-lookarounds-assertion': 'error',
    'regexp/no-escape-backspace': 'error',
    'regexp/no-invalid-regexp': 'error',
    'regexp/no-lazy-ends': 'error',
    'regexp/no-misleading-capturing-group': 'error',
    'regexp/no-misleading-unicode-character': 'error',
    'regexp/no-missing-g-flag': 'error',
    'regexp/no-optional-assertion': 'error',
    'regexp/no-potentially-useless-backreference': 'error',
    'regexp/no-super-linear-backtracking': 'error',
    'regexp/no-super-linear-move': 'error',
    'regexp/no-useless-assertions': 'error',
    'regexp/no-useless-backreference': 'error',
    'regexp/no-useless-dollar-replacements': 'error',
    'regexp/strict': 'error',
    'regexp/confusing-quantifier': 'error',
    'regexp/control-character-escape': 'error',
    'regexp/negation': 'error',
    'regexp/no-dupe-characters-character-class': 'error',
    'regexp/no-empty-string-literal': 'error',
    'regexp/no-extra-lookaround-assertions': 'error',
    'regexp/no-invisible-character': 'error',
    'regexp/no-legacy-features': 'error',
    'regexp/no-non-standard-flag': 'error',
    'regexp/no-obscure-range': 'error',
    'regexp/no-octal': 'error',
    'regexp/no-standalone-backslash': 'error',
    'regexp/no-trivially-nested-assertion': 'error',
    'regexp/no-trivially-nested-quantifier': 'error',
    'regexp/no-unused-capturing-group': 'error',
    'regexp/no-useless-character-class': 'error',
    'regexp/no-useless-flag': 'error',
    'regexp/no-useless-lazy': 'error',
    'regexp/no-useless-quantifier': 'error',
    'regexp/no-useless-range': 'error',
    'regexp/no-useless-set-operand': 'error',
    'regexp/no-useless-string-literal': 'error',
    'regexp/no-useless-two-nums-quantifier': 'error',
    'regexp/no-zero-quantifier': 'error',
    'regexp/optimal-lookaround-quantifier': 'error',
    'regexp/optimal-quantifier-concatenation': 'error',
    'regexp/prefer-escape-replacement-dollar-char': 'error',
    'regexp/prefer-predefined-assertion': 'error',
    'regexp/prefer-quantifier': 'error',
    'regexp/prefer-range': 'error',
    'regexp/prefer-regexp-exec': 'error',
    'regexp/prefer-regexp-test': 'error',
    'regexp/prefer-set-operation': 'error',
    'regexp/require-unicode-regexp': 'error',
    'regexp/require-unicode-sets-regexp': 'error',
    'regexp/simplify-set-operations': 'error',
    'regexp/sort-alternatives': 'error',
    'regexp/use-ignore-case': 'error',
    'regexp/grapheme-string-literal': 'warn',
    'regexp/hexadecimal-escape': 'warn',
    'regexp/letter-case': 'warn',
    'regexp/match-any': 'warn',
    'regexp/no-useless-escape': 'warn',
    'regexp/no-useless-non-capturing-group': 'warn',
    'regexp/prefer-character-class': 'warn',
    'regexp/prefer-d': 'warn',
    'regexp/prefer-lookaround': 'warn',
    'regexp/prefer-named-backreference': 'warn',
    'regexp/prefer-named-capture-group': 'warn',
    'regexp/prefer-named-replacement': 'warn',
    'regexp/prefer-plus-quantifier': 'warn',
    'regexp/prefer-question-quantifier': 'warn',
    'regexp/prefer-result-array-groups': 'warn',
    'regexp/prefer-star-quantifier': 'warn',
    'regexp/prefer-unicode-codepoint-escapes': 'warn',
    'regexp/prefer-w': 'warn',
    'regexp/sort-character-class-elements': 'warn',
    'regexp/sort-flags': 'warn',
    'regexp/unicode-escape': 'warn',
    'regexp/unicode-property': 'warn',
  },
};
