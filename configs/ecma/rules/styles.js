const options = {
  maxDepth: 12,
  maxNestedCallbacks: 12,
  maxParams: 12,
  maxStatements: 64,
};

export default {
  camelcase: ['warn', { properties: 'never', ignoreDestructuring: false }],
  'capitalized-comments': ['warn', 'always'],
  'consistent-this': 'warn',
  'func-name-matching': ['warn', 'always'],
  'func-names': 'warn',
  'func-style': ['warn', 'expression', { allowArrowFunctions: true }],
  'id-denylist': 'off',
  'id-length': ['warn', { min: 1, max: 32 }],
  'id-match': ['warn', '^[a-z]+([A-Z][a-z]+)*$'],
  'logical-assignment-operators': [
    'warn',
    'always',
    { enforceForIfStatements: false },
  ],
  'max-depth': ['warn', options.maxDepth],
  'max-lines': [
    'warn',
    {
      max: 360,
      skipBlankLines: true,
      skipComments: false,
    },
  ],
  'max-lines-per-function': [
    'warn',
    {
      max: 120,
      skipBlankLines: true,
      skipComments: false,
      IIFEs: true,
    },
  ],
  'max-nested-callbacks': ['warn', options.maxNestedCallbacks],
  'max-params': ['warn', options.maxParams],
  'max-statements': [
    'warn',
    options.maxStatements,
    {
      ignoreTopLevelFunctions: true,
    },
  ],
  'new-cap': [
    'warn',
    {
      capIsNew: false,
      capIsNewExceptions: [
        'Immutable.Map',
        'Immutable.Set',
        'Immutable.List',
      ],
    },
  ],
  'no-array-constructor': 'warn',
  'no-bitwise': 'warn',
  'no-continue': 'warn',
  'no-inline-comments': 'warn',
  'no-lonely-if': 'warn',
  'no-multi-assign': ['warn'],
  'no-negated-condition': 'warn',
  'no-nested-ternary': 'warn',
  'no-new-native-nonconstructor': 'warn',
  'no-new-object': 'warn',
  'no-plusplus': ['warn', { allowForLoopAfterthoughts: true }],
  'no-restricted-syntax': [
    'warn',
    {
      selector: 'ForInStatement',
      message:
        'for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.',
    },
    {
      selector: 'ForOfStatement',
      message:
        'iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.',
    },
    {
      selector: 'LabeledStatement',
      message:
        'Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.',
    },
    {
      selector: 'WithStatement',
      message:
        '`with` is disallowed in strict mode because it makes code impossible to predict and optimize.',
    },
  ],
  'no-ternary': 'off',
  'no-underscore-dangle': [
    'warn',
    {
      allowAfterThis: false,
      allowAfterSuper: false,
      enforceInMethodNames: true,
    },
  ],
  'no-unneeded-ternary': ['warn', { defaultAssignment: false }],
  'one-var': ['warn', 'never'],
  'operator-assignment': ['warn', 'always'],
  'prefer-exponentiation-operator': 'warn',
  'prefer-object-spread': 'warn',
  'sort-keys': 'off',
  'sort-vars': 'warn',
  'unicode-bom': ['warn', 'never'],

  // DEPRECATED RULES

  // Replaced by eslint-plugin-jsdoc rules
  'jsdoc/valid-jsdoc': 'off',

  // Replaced by @stylistic/eslint-plugin rules
  'array-bracket-newline': 'off',
  'array-bracket-spacing': 'off',
  'array-element-newline': 'off',
  'arrow-parens': 'off',
  'arrow-spacing': 'off',
  'block-spacing': 'off',
  'brace-style': 'off',
  'comma-dangle': 'off',
  'comma-spacing': 'off',
  'comma-style': 'off',
  'computed-property-spacing': 'off',
  'dot-location': 'off',
  'eol-last': 'off',
  'func-call-spacing': 'off',
  'function-call-argument-newline': 'off',
  'function-paren-newline': 'off',
  'generator-star-spacing': 'off',
  'implicit-arrow-linebreak': 'off',
  indent: 'off',
  'jsx-quotes': 'off',
  'key-spacing': 'off',
  'keyword-spacing': 'off',
  'linebreak-style': 'off',
  'lines-around-comment': 'off',
  'lines-between-class-members': 'off',
  'max-len': 'off',
  'max-statements-per-line': 'off',
  'multiline-ternary': 'off',
  'new-parens': 'off',
  'newline-per-chained-call': 'off',
  'no-confusing-arrow': 'off',
  'no-extra-parens': 'off',
  'no-extra-semi': 'off',
  'no-floating-decimal': 'off',
  'no-mixed-operators': 'off',
  'no-mixed-spaces-and-tabs': 'off',
  'no-multi-spaces': 'off',
  'no-multiple-empty-lines': 'off',
  'no-tabs': 'off',
  'no-trailing-spaces': 'off',
  'no-whitespace-before-property': 'off',
  'nonblock-statement-body-position': 'off',
  'object-curly-newline': 'off',
  'object-curly-spacing': 'off',
  'object-property-newline': 'off',
  'one-var-declaration-per-line': 'off',
  'operator-linebreak': 'off',
  'padded-blocks': 'off',
  'padding-line-between-statements': 'off',
  'quote-props': 'off',
  quotes: 'off',
  'rest-spread-spacing': 'off',
  'semi-spacing': 'off',
  'semi-style': 'off',
  semi: 'off',
  'space-before-blocks': 'off',
  'space-before-function-paren': 'off',
  'space-in-parens': 'off',
  'space-infix-ops': 'off',
  'space-unary-ops': 'off',
  'spaced-comment': 'off',
  'switch-colon-spacing': 'off',
  'template-curly-spacing': 'off',
  'template-tag-spacing': 'off',
  'wrap-iife': 'off',
  'wrap-regex': 'off',
  'yield-star-spacing': 'off',
};
